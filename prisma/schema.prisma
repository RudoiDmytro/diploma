generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId              Int           @id @default(autoincrement())
  email               String?       @unique @db.VarChar(150)
  password            String        @db.VarChar(50)
  phoneNumber         String?       @db.VarChar(50)
  role                Role          @default(SEEKER)
  isAdmin             Boolean?
  isEmployer          Boolean?
  jobs                Job[]
  assesments          Assessment[]
  seekerSkills        Skill[]
  cvFileUrl           String?       @db.VarChar(2000)
  profilePhotoUrl     String?       @db.VarChar(2000)
  organizationName    String?       @db.VarChar(300)
  organizationLogoUrl String?       @db.VarChar(2000)
  application         Application[]
  Result              Result[]

  @@map("users")
}

enum Role {
  SEEKER
  EMPLOYER
  ADMIN
}

model Job {
  slug             String        @id @db.VarChar(2000)
  title            String        @db.VarChar(500)
  type             String        @db.VarChar(100)
  locationType     String        @db.VarChar(50)
  location         String?       @db.VarChar(500)
  description      String
  salary           Int
  companyName      String        @db.VarChar(300)
  applicationEmail String?       @db.VarChar(150)
  applicationUrl   String?       @db.VarChar(2000)
  companyLogoUrl   String?       @db.VarChar(2000)
  approved         Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User?         @relation(fields: [userId], references: [userId])
  userId           Int?
  category         Category      @relation(fields: [categoryId], references: [categoryId])
  categoryId       Int
  requiredSkills   Skill[]
  Application      Application[]

  @@map("jobs")
}

model Application {
  applicationId Int       @id
  feedbackDate  DateTime  @default(now())
  job           Job       @relation(fields: [jobSlug], references: [slug])
  user          User      @relation(fields: [userId], references: [userId])
  jobSlug       String    @db.VarChar(2000)
  userId        Int
  feedback      Feedback?

  @@map("applicaions")
}

model Feedback {
  feedbackId    Int         @id
  application   Application @relation(fields: [applicationId], references: [applicationId])
  applicationId Int         @unique
  feedbackText  String
  feedbackDate  DateTime    @default(now())

  @@map("feedback")
}

model Assessment {
  slug        String   @id @db.VarChar(2000)
  title       String   @db.VarChar(500)
  duration    DateTime
  description String?
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  score       Int?
  tasks       Task[]
  user        User?    @relation(fields: [userId], references: [userId])
  userId      Int?
  Result      Result[]

  @@map("assessments")
}

model Category {
  categoryId Int    @id
  naming     String @unique @db.VarChar(100)
  job        Job[]

  @@map("categories")
}

model Skill {
  skillId          Int     @id
  skillName        String  @unique @db.VarChar(300)
  requiredLevel    String? @db.VarChar(100)
  proficientyLevel String? @db.VarChar(100)
  job              Job?    @relation(fields: [jobSlug], references: [slug])
  user             User?   @relation(fields: [userId], references: [userId])
  userId           Int?
  jobSlug          String? @db.VarChar(2000)

  @@map("tags")
}

model Task {
  taskToken       String     @id @db.VarChar(2000)
  type            TaskType
  taskFileUrl     String?    @db.VarChar(2000)
  question        String?
  position        Int
  ponderation     Int
  assessment      Assessment @relation(fields: [assessment_slug], references: [slug])
  assessment_slug String     @db.VarChar(2000)
  answers         Answer[]
  Result          Result?

  @@map("tasks")
}

enum TaskType {
  PROBLEM
  TEST
}

model Answer {
  answerId    Int     @id
  score       Int
  description String?
  correct     Boolean
  task        Task    @relation(fields: [taskToken], references: [taskToken])
  taskToken   String  @db.VarChar(2000)

  @@map("answers")
}

model Result {
  resultId       Int        @id
  description    String?
  assessmentDate DateTime
  assessment     Assessment @relation(fields: [assessmentSlug], references: [slug])
  user           User       @relation(fields: [userId], references: [userId])
  Task           Task       @relation(fields: [taskToken], references: [taskToken])
  assessmentSlug String     @db.VarChar(2000)
  userId         Int
  taskToken      String     @unique @db.VarChar(2000)

  @@map("evaluations")
}
