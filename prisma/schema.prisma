generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  email               String?       @unique @db.VarChar(150)
  username            String?       @unique @db.VarChar(200)
  password            String?       @db.VarChar(1000)
  phoneNumber         String?       @db.VarChar(50)
  profileImageUrl     String?       @db.VarChar(2000)
  role                Role?
  emailVerified       DateTime?
  jobs                Job[]
  assesments          Assessment[]
  seekerSkills        Skill[]
  cvFileUrl           String?       @db.VarChar(2000)
  organizationName    String?       @db.VarChar(300)
  organizationLogoUrl String?       @db.VarChar(2000)
  application         Application[]
  Result              Result[]
  account             Account[]
  session             Session[]
}

enum Role {
  SEEKER
  EMPLOYER
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Job {
  slug             String        @id @db.VarChar(2000)
  title            String        @db.VarChar(500)
  type             String        @db.VarChar(100)
  locationType     String        @db.VarChar(50)
  location         String?       @db.VarChar(500)
  description      String
  salary           Int
  companyName      String        @db.VarChar(300)
  applicationEmail String?       @db.VarChar(150)
  applicationUrl   String?       @db.VarChar(2000)
  companyLogoUrl   String?       @db.VarChar(2000)
  approved         Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User?         @relation(fields: [userId], references: [id])
  userId           String?
  category         Category      @relation(fields: [categoryId], references: [categoryId])
  categoryId       Int
  requiredSkills   Skill[]
  Application      Application[]

  @@map("jobs")
}

model Application {
  applicationId Int       @id
  feedbackDate  DateTime  @default(now())
  job           Job       @relation(fields: [jobSlug], references: [slug])
  user          User      @relation(fields: [userId], references: [id])
  jobSlug       String    @db.VarChar(2000)
  userId        String
  feedback      Feedback?

  @@map("applicaions")
}

model Feedback {
  feedbackId    Int         @id
  application   Application @relation(fields: [applicationId], references: [applicationId])
  applicationId Int         @unique
  feedbackText  String
  feedbackDate  DateTime    @default(now())

  @@map("feedback")
}

model Assessment {
  slug        String    @id @db.VarChar(2000)
  title       String    @db.VarChar(500)
  duration    String    @db.VarChar(500)
  endTime     DateTime?
  description String?
  companyName String    @db.VarChar(300)
  logoUrl     String?   @db.VarChar(2000)
  approved    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  score       Int?
  tasks       Task[]
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
  results     Result[]
  category    Category  @relation(fields: [categoryId], references: [categoryId])
  categoryId  Int
  skills      Skill[]

  @@map("assessments")
}

model Category {
  categoryId Int          @id @default(autoincrement())
  naming     String       @unique @db.VarChar(100)
  job        Job[]
  assessment Assessment[]

  @@map("categories")
}

model Skill {
  skillId    Int          @id @default(autoincrement())
  skillName  String       @unique @db.VarChar(300)
  job        Job[]
  user       User[]
  assessment Assessment[]

  @@map("skills")
}

model Task {
  taskToken       String     @id @db.VarChar(2000)
  type            String     @db.VarChar(20)
  taskFileUrl     String?    @db.VarChar(2000)
  question        String?
  ponderation     Int
  assessment      Assessment @relation(fields: [assessment_slug], references: [slug])
  assessment_slug String     @db.VarChar(2000)
  answers         Answer[]

  @@map("tasks")
}

model Answer {
  answerId    Int     @id @default(autoincrement())
  description String?
  correct     Boolean
  task        Task    @relation(fields: [taskToken], references: [taskToken])
  taskToken   String  @db.VarChar(2000)

  @@map("answers")
}

model Result {
  resultId       Int        @id @default(autoincrement())
  description    String?
  score          Int
  assessmentDate DateTime   @default(now())
  assessment     Assessment @relation(fields: [assessmentSlug], references: [slug])
  user           User       @relation(fields: [userId], references: [id])
  assessmentSlug String     @db.VarChar(2000)
  userId         String

  @@map("evaluations")
}
